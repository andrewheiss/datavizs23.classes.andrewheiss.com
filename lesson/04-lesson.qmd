---
title: "Amounts and proportions"
date: "2023-06-12"
date_end: "2023-06-16"
---

```{r setup, include=FALSE}
library(tidyverse)
library(gapminder)

knitr::opts_chunk$set(fig.width = 6, fig.height = 4.5, fig.align = "center", collapse = TRUE)
set.seed(1234)
options(dplyr.summarise.inform = FALSE)
```

```{r learnr-setup, echo=FALSE, results="asis"}
source(here::here("R", "learnr-things.R"))
include_iframe_resizer()
```

When you visualize proportions with ggplot, you'll typically go through a two-step process:

1. Summarize the data with {dplyr} (typically with a combination of  `group_by()` and `summarize()`)
2. Plot the summarized data


## Manipulating data with {dplyr}

You had some experience with {dplyr} functions in the RStudio primers, but we'll briefly review them here.

There are 6 important verbs that you'll typically use when working with data:

- Extract rows/cases with `filter()`
- Extract columns/variables with `select()`
- Arrange/sort rows with `arrange()`
- Make new columns/variables with `mutate()`
- Make group summaries with `group_by %>% summarize()`

Every {dplyr} verb follows the same pattern. The first argument is always a data frame, and the function always returns a data frame:

```{r dplyr-template, eval=FALSE}
VERB(DATA_TO_TRANSFORM, STUFF_IT_DOES)
```

### Filtering with `filter()`

The `filter()` function takes two arguments: a data frame to transform, and a set of tests. It will return each row for which the test is TRUE.

This code, for instance, will look at the `gapminder` dataset and return all rows where `country` is equal to "Denmark":

```{r filter-denmark}
filter(gapminder, country == "Denmark")
```

Notice that there are two equal signs (`==`). This is because it's a logical test, similar to greater than (`>`) or less than (`<`). When you use a single equal sign, you set an argument (like `data = gapminder`); when you use two, you are doing a test. There are lots of different ways to do logical tests:

| Test        | Meaning                  |
| ----------- | ------------------------ |
| `x < y`     | Less than                |
| `x > y`     | Greater than             |
| `x == y`    | Equal to                 |
| `x <= y`    | Less than or equal to    |
| `x >= y`    | Greater than or equal to |
| `x != y`    | Not equal to             |
| `x %in% y`  | In (group membership)    |
| `is.na(x)`  | Is missing               |
| `!is.na(x)` | Is not missing           |

::: {.callout-important}
### Your turn

Use `filter()` and logical tests to show:

1. The data for Canada
2. All data for countries in Oceania
3. Rows where life expectancy is greater than 82

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-1/",
  id = "learnr-04-lesson-dplyr1"
)
```

You can also use multiple conditions, and these will extract rows that meet every test. By default, if you separate the tests with a comma, R will consider this an "and" test and find rows that are *both* Denmark and greater than 2000.

```{r filter-denmark-multiple}
filter(gapminder, country == "Denmark", year > 2000)
```

You can also use "or" with "`|`" and "not" with "`!`":

| Operator | Meaning |
| -------- | ------- |
| `a & b`  | and     |
| `a | b`  | or      |
| `!a`     | not     |


::: {.callout-important}
### Your turn

Use `filter()` and logical tests to show:

1. Canada before 1970
2. Countries where life expectancy in 2007 is below 50
3. Countries where life expectancy in 2007 is below 50 and are not in Africa

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-2/",
  id = "learnr-04-lesson-dplyr2"
)
```

Beware of some common mistakes! You can't collapse multiple tests into one. Instead, use two separate tests:

```{r filter-multiple, eval=FALSE}
# This won't work!
filter(gapminder, 1960 < year < 1980)

# This will work
filter(gapminder, 1960 < year, year < 1980)
```

Also, you can avoid stringing together lots of tests by using the `%in%` operator, which checks to see if a value is in a list of values.

```{r filter-in, eval=FALSE}
# This works, but is tedious
filter(gapminder, 
       country == "Mexico" | country == "Canada" | country == "United States")

# This is more concise and easier to add other countries later
filter(gapminder, 
       country %in% c("Mexico", "Canada", "United States"))
```

### Adding new columns with `mutate()`

You create new columns with the `mutate()` function. You can create a single column like this:

```{r mutate-single}
mutate(gapminder, gdp = gdpPercap * pop)
```

And you can create multiple columns by including a comma-separated list of new columns to create:

```{r mutate-multiple}
mutate(gapminder, gdp = gdpPercap * pop,
                  pop_mill = round(pop / 1000000))
```

You can also do conditional tests within `mutate()` using the `ifelse()` function. This works like the `=IFELSE` function in Excel. Feed the function three arguments: (1) a test, (2) the value if the test is true, and (3) the value if the test is false:

```{r show-ifelse, eval=FALSE}
ifelse(TEST, VALUE_IF_TRUE, VALUE_IF_FALSE)
```

We can create a new column that is a binary indicator for whether the country's row is after 1960:

```{r mutate-after-1960}
mutate(gapminder, after_1960 = ifelse(year > 1960, TRUE, FALSE))
```

We can also use text labels instead of `TRUE` and `FALSE`:

```{r mutate-after-1960-text}
mutate(gapminder, 
       after_1960 = ifelse(year > 1960, "After 1960", "Before 1960"))
```

::: {.callout-important}
### Your turn

Use `mutate()` to:

1. Add an `africa` column that is TRUE if the country is on the African continent
2. Add a column for logged GDP per capita
3. Add an `africa_asia` column that says “Africa or Asia” if the country is in Africa or Asia, and “Not Africa or Asia” if it’s not

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-3/",
  id = "learnr-04-lesson-dplyr3"
)
```

### Combining multiple verbs with pipes (`%>%`)

What if you want to filter to include only rows from 2002 *and* make a new column with the logged GDP per capita? Doing this requires both `filter()` and `mutate()`, so we need to find a way to use both at once.

One solution is to use intermediate variables for each step:

```{r pipes-intermediate, eval=FALSE}
gapminder_2002_filtered <- filter(gapminder, year == 2002)

gapminder_2002_logged <- mutate(gapminder_2002_filtered, log_gdpPercap = log(gdpPercap))
```

That works fine, but your environment panel will start getting full of lots of intermediate data frames.

Another solution is to nest the functions inside each other. Remember that all {dplyr} functions return data frames, so you can feed the results of one into another:

```{r pipes-nested, eval=FALSE}
filter(mutate(gapminder, log_gdpPercap = log(gdpPercap)), 
       year == 2002)
```

That works too, but it gets *really* complicated once you have even more functions, and it's hard to keep track of which function's arguments go where. I'd avoid doing this entirely.

One really nice solution is to use a pipe, or `%>%`. **The pipe takes an object on the left and passes it as the first argument of the function on the right**.

```{r pipe-example, eval=FALSE}
# gapminder will automatically get placed in the _____ spot
gapminder %>% filter(_____, country == "Canada")
```

These two lines of code do the same thing:

```{r pipe-equivalent, eval=FALSE}
filter(gapminder, country == "Canada")

gapminder %>% filter(country == "Canada")
```

Using pipes, you can start with a data frame, pass it to one verb, then pass the output of that verb to the next verb, and so on. **When reading any code with a `%>%`, it's easiest to read the `%>%` as "and then".** This would read:

> Take the `gapminder` dataset *and then* filter it so that it only has rows from 2002 *and then* add a new column with the logged GDP per capita

```{r pipes-full-example, eval=FALSE}
gapminder %>% 
  filter(year == 2002) %>% 
  mutate(log_gdpPercap = log(gdpPercap))
```

Here's another way to think about pipes more conceptually. This isn't valid R code, obviously, but imagine you're going to take yourself, and then wake up, get out of bed, get dressed, and leave the house. Writing that whole process as nested functions would look like this:

```{r wake-up-nested, eval=FALSE}
leave_house(get_dressed(get_out_of_bed(wake_up(me, time = "8:00"), side = "correct"), pants = TRUE, shirt = TRUE), car = TRUE, bike = FALSE)
```

Instead of nesting everything, we can use pipes to chain these together. This would read

> Take myself, *and then* wake up at 8:00, *and then* get out of bed on the correct side, *and then* get dressed with pants and a shirt, *and then* leave the house in a car

```{r wake-up-pipes, eval=FALSE}
me %>% 
  wake_up(time = "8:00") %>% 
  get_out_of_bed(side = "correct") %>% 
  get_dressed(pants = TRUE, shirt = TRUE) %>% 
  leave_house(car = TRUE, bike = FALSE)
```

### Summarizing data by groups with `group_by() %>% summarize()`

The `summarize()` verb takes an entire frame and calculates summary information about it. For instance, this will find the average life expectancy for the whole `gapminder` data:

```{r summarize-full-single}
gapminder %>% summarize(mean_life = mean(lifeExp))
```

You can also make multiple summary variables, just like `mutate()`, and it will return a column for each:

```{r summarize-full-multiple}
gapminder %>% summarize(mean_life = mean(lifeExp),
                        min_life = min(lifeExp))
```

::: {.callout-important}
### Your turn

Use `summarize()` to calculate:

1. The first (minimum) year in the `gapminder` dataset
2. The last (maximum) year in the dataset
3. The number of rows in the dataset (use the [{dplyr} cheatsheet](https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf))
4. The number of distinct countries in the dataset (use the [{dplyr} cheatsheet](https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf))

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-4/",
  id = "learnr-04-lesson-dplyr4"
)
```

::: {.callout-important}
### Your turn

Use `filter()` and `summarize()` to calculate the median life expectancy on the African continent in 2007:
:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-5/",
  id = "learnr-04-lesson-dplyr5"
)
```

Notice that `summarize()` on its own summarizes the whole dataset, so you only get a single row back. These values are the averages and minimums for the entire data frame. If you group your data into separate subgroups, you can use `summarize()` to calculate summary statistics for each group. Do this with `group_by()`.

The `group_by()` function puts rows into groups based on values in a column. If you run this:

```{r summarize-groupby}
gapminder %>% group_by(continent)
```

…you won't see anything different! R has put the dataset into separate invisible groups behind the scenes, but you haven't done anything with those groups, so nothing has really happened. If you do things with those groups with `summarize()`, though, `group_by()` becomes much more useful.

For instance, this will take the `gapminder` data frame, group it by continent, and then summarize it by calculating the number of distinct countries in each group. It will return *one row for each group*, so there should be a row for each continent:

```{r summarize-group-distinct}
gapminder %>% 
  group_by(continent) %>% 
  summarize(n_countries = n_distinct(country)) 
```

You can calculate multiple summary statistics, as before:

```{r summarize-group-distinct-multiple}
gapminder %>% 
  group_by(continent) %>% 
  summarize(n_countries = n_distinct(country),
            avg_life_exp = mean(lifeExp)) 
```

::: {.callout-important}
### Your turn

Find the minimum, maximum, and median life expectancy for each continent:

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-6/",
  id = "learnr-04-lesson-dplyr6"
)
```

::: {.callout-important}
### Your turn

Find the minimum, maximum, and median life expectancy for each continent in 2007 only:

:::

```{r echo=FALSE, results="asis"}
embedded_learnr(
  url = "https://andrewheiss.shinyapps.io/datavizm20_04-dplyr-7/",
  id = "learnr-04-lesson-dplyr7"
)
```

Finally, you can group by multiple columns and R will create subgroups for every combination of the groups and return the number of rows of combinations. For instance, we can calculate the average life expectancy by both year and continent and we'll get 60 rows, since there are 5 continents and 12 years (5 × 12 = 60):

```{r groupby-year-continent}
gapminder %>% 
  group_by(continent, year) %>% 
  summarize(avg_life_exp = mean(lifeExp)) 
```


### Selecting with `select()`

The last two verbs are far simpler than `filter()`, `mutate()`, and `group_by() %>% summarize()`.

You can choose specific columns with the `select()` verb. This will only keep two columns: `lifeExp` and `year`:

```{r select-single}
gapminder %>% select(lifeExp, year)
```

You can remove specific columns by prefacing the column names with `-`, like `-lifeExp`:

```{r omit-single}
gapminder %>% select(-lifeExp)
```

You can also rename columns using `select()`. Follow this pattern: `select(old_name = new_name)`.

```{r rename-select}
gapminder %>% select(year, country, life_expectancy = lifeExp)
```

Alternatively, there's a special `rename()` verb that will, um, rename, while keeping all the other columns:

```{r rename-rename}
gapminder %>% rename(life_expectancy = lifeExp)
```

### Arranging data with `arrange()`

The `arrange()` verb sorts data. By default it sorts ascendingly, putting the lowest values first:

```{r arrange-single}
gapminder %>% arrange(lifeExp)
```

You can reverse that by wrapping the column name with `desc()`:

```{r arrange-single-desc}
gapminder %>% arrange(desc(lifeExp))
```

You can sort by multiple columns by specifying them in a comma separated list. For example, we can sort by continent and then sort by life expectancy within the continents:

```{r arrange-multiple}
gapminder %>% 
  arrange(continent, desc(lifeExp))
```

### That's it!

Those are the main verbs you'll deal with in this class. There are dozens of other really useful ones—check out the [{dplyr} and {tidyr} cheat sheet](https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) for examples. 


## Changing colors, shapes, and sizes, with `scale_*()`

Recall from session 3 that the grammar of graphics uses a set of layers to define elements of plots:

```{r gg-layers, echo=FALSE, out.width="50%", fig.align="center"}
knitr::include_graphics("/slides/img/03/ggplot-layers@4x.png", error = FALSE)
```

In tomorrow's session, you'll learn all about the Theme layer. Here we'll briefly cover the Scales layer, which we use for changing aspects of the different aesthetics, like using logged axes or changing colors or shapes.

All the functions that deal with scales conveniently follow the same naming pattern: 

```{r scale-template, eval=FALSE}
scale_AESTHETIC_DETAILS()
```

Here are some common scale functions:

```{r scale-examples, eval=FALSE}
scale_x_continuous()
scale_y_reverse()
scale_color_viridis_c()
scale_shape_manual(values = c(19, 13, 15))
scale_fill_manual(values = c("red", "orange", "blue"))
```

You can see a [list of all of the possible scale functions here](https://ggplot2.tidyverse.org/reference/index.html#section-scales), and you should reference that documentation (and the excellent examples) often when working with these functions.

As long as you have mapped a variable to an aesthetic with `aes()`, you can use the `scale_*()` functions to deal with it. For instance, in this ggplot, we have mapped variables to `x`, `y`, and `fill`, which means we can use those corresponding scale functions to manipulate how those aesthetics are shown. Here we reverse the y-axis (ew, don't really do this), and we use a discrete viridis color palette:

```{r plot-continent-counts}
continent_counts <- gapminder %>% 
  group_by(continent) %>% 
  summarize(countries = n_distinct(country))

ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_y_reverse() +  # lol this is bad; don't do it in real life
  scale_fill_viridis_d()
```

You can also use different arguments in the scale functions—again, check the documentation for examples. For instance, if we want to use the [plasma palette from the viridis package](https://ggplot2.tidyverse.org/reference/scale_viridis.html), we can set that as an option:

```{r plot-continent-plasma}
ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_viridis_d(option = "plasma")
```

That yellow might be too bright and hard to see, so we can tell ggplot to not use the full range of the palette, ending at 90% of the range instead:

```{r plot-continent-plasma-9}
ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_viridis_d(option = "plasma", end = 0.9)
```

Instead of letting R calculate the colors from a general palette, you can also specify your own colors with `scale_fill_manual()` and feeding it a list of values—generally as [hex codes](https://www.google.com/search?q=color+picker) or a name from a [list of built-in R colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf):

```{r plot-continent-manual}
ggplot(continent_counts, aes(x = continent, y = countries, fill = continent)) +
  geom_col() +
  scale_fill_manual(values = c("chartreuse4", "cornsilk4", "black", "#fc03b6", "#5c47d6"))
```

Scale functions also work for other aesthetics like `shape` or `color` or `size`. For instance, consider this plot, which has all three:

```{r plot-health-wealth-basic}
gapminder_2007 <- gapminder %>% 
  filter(year == 2007)

ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10()
```

We can change the colors of the points with `scale_color_*()`:

```{r plot-health-wealth-colors}
ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_manual(values = c("chartreuse4", "cornsilk4", "black", "#fc03b6", "#5c47d6"))
```

We can change the shapes with `scale_shape_*()`. If you run `?pch` in your console or search for `pch` in the help, you can see all the possible shapes.

```{r plot-health-wealth-shapes}
ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_shape_manual(values = c(12, 9, 17, 19, 15))
```

You can change the size with `scale_size_*()`. Here we make it so the smallest possible size is 1 and the largest is 15:

```{r plot-health-wealth-size}
ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_size_continuous(range = c(1, 15))
```

We can even do all three at once:

```{r plot-health-wealth-everything}
ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10() +
  scale_color_manual(values = c("chartreuse4", "cornsilk4", "black", "#fc03b6", "#5c47d6")) +
  scale_shape_manual(values = c(12, 9, 17, 19, 15)) +
  scale_size_continuous(range = c(1, 15))
```

Phew. That's ugly.

One last thing we can do with scales is format how they show up on the plot. Notice how the population legend uses scientific notation like `2.50e+08`. This means you need to move the decimal point 8 places to the right, making it `250000000`. Leaving it in scientific notation isn't great because it makes it really hard to read and interpret.

If you load the {scales} library (which is installed as part of {tidyverse} but isn't automatically loaded), you can use some neat helper functions to reformat the text that shows up in plots. For instance, we can make it so population is formatted as a number with commas every 3 numbers, and the x-axis is formatted as dollars:

```{r plot-health-wealth-scale-labels, warning=FALSE, message=FALSE}
library(scales)

ggplot(gapminder_2007,
       aes(x = gdpPercap, y = lifeExp, 
           color = continent, shape = continent, size = pop)) +
  geom_point() +
  scale_x_log10(labels = dollar) +
  scale_size_continuous(labels = comma)
```

[Check the documentation for {scales}](https://scales.r-lib.org/reference/index.html) for details about all the labelling functions it has, including dates, percentages, p-values, LaTeX math, etc.
